//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BasicMovement"",
            ""id"": ""23c83fe9-e588-4f0a-8620-f671fe3d05cb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""7284f024-eedb-486d-9195-f7c8a9d8333a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""251b4110-a2b0-4e5c-9e1d-3d4c8589571e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inspect"",
                    ""type"": ""Button"",
                    ""id"": ""b3c1f694-6b87-4af9-886a-0e67070961dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Statistics"",
                    ""type"": ""Button"",
                    ""id"": ""beb9f488-bade-4a89-8b51-5dfc7e6ec3f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConsoleLogs"",
                    ""type"": ""Button"",
                    ""id"": ""ad2a48d4-9b03-4c69-aeee-9a283ad1be0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FollowEnemy"",
                    ""type"": ""Button"",
                    ""id"": ""ca6dfcc6-bcdf-4d86-8e23-89508ca9c417"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7b6e2972-c3cf-4218-81b1-d46aeecd0205"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74a1f011-9815-4ff9-9f17-44f41f6de01f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f480cc5-832d-4f39-a999-8e61a7460422"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e5c7587-0a9e-44c6-9e34-13fe8ef3132a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Inspect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f09f3065-79dc-4a01-8f6a-c82858738b51"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Statistics"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98962a11-dab3-4b66-b0f1-82442c9f745f"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""ConsoleLogs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48f788c8-fa45-4056-86fe-4018ffcfb6c0"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""FollowEnemy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BasicMovement
        m_BasicMovement = asset.FindActionMap("BasicMovement", throwIfNotFound: true);
        m_BasicMovement_Move = m_BasicMovement.FindAction("Move", throwIfNotFound: true);
        m_BasicMovement_Inventory = m_BasicMovement.FindAction("Inventory", throwIfNotFound: true);
        m_BasicMovement_Inspect = m_BasicMovement.FindAction("Inspect", throwIfNotFound: true);
        m_BasicMovement_Statistics = m_BasicMovement.FindAction("Statistics", throwIfNotFound: true);
        m_BasicMovement_ConsoleLogs = m_BasicMovement.FindAction("ConsoleLogs", throwIfNotFound: true);
        m_BasicMovement_FollowEnemy = m_BasicMovement.FindAction("FollowEnemy", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicMovement
    private readonly InputActionMap m_BasicMovement;
    private IBasicMovementActions m_BasicMovementActionsCallbackInterface;
    private readonly InputAction m_BasicMovement_Move;
    private readonly InputAction m_BasicMovement_Inventory;
    private readonly InputAction m_BasicMovement_Inspect;
    private readonly InputAction m_BasicMovement_Statistics;
    private readonly InputAction m_BasicMovement_ConsoleLogs;
    private readonly InputAction m_BasicMovement_FollowEnemy;
    public struct BasicMovementActions
    {
        private @PlayerControls m_Wrapper;
        public BasicMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BasicMovement_Move;
        public InputAction @Inventory => m_Wrapper.m_BasicMovement_Inventory;
        public InputAction @Inspect => m_Wrapper.m_BasicMovement_Inspect;
        public InputAction @Statistics => m_Wrapper.m_BasicMovement_Statistics;
        public InputAction @ConsoleLogs => m_Wrapper.m_BasicMovement_ConsoleLogs;
        public InputAction @FollowEnemy => m_Wrapper.m_BasicMovement_FollowEnemy;
        public InputActionMap Get() { return m_Wrapper.m_BasicMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicMovementActions set) { return set.Get(); }
        public void SetCallbacks(IBasicMovementActions instance)
        {
            if (m_Wrapper.m_BasicMovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnMove;
                @Inventory.started -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnInventory;
                @Inspect.started -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnInspect;
                @Inspect.performed -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnInspect;
                @Inspect.canceled -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnInspect;
                @Statistics.started -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnStatistics;
                @Statistics.performed -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnStatistics;
                @Statistics.canceled -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnStatistics;
                @ConsoleLogs.started -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnConsoleLogs;
                @ConsoleLogs.performed -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnConsoleLogs;
                @ConsoleLogs.canceled -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnConsoleLogs;
                @FollowEnemy.started -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnFollowEnemy;
                @FollowEnemy.performed -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnFollowEnemy;
                @FollowEnemy.canceled -= m_Wrapper.m_BasicMovementActionsCallbackInterface.OnFollowEnemy;
            }
            m_Wrapper.m_BasicMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Inspect.started += instance.OnInspect;
                @Inspect.performed += instance.OnInspect;
                @Inspect.canceled += instance.OnInspect;
                @Statistics.started += instance.OnStatistics;
                @Statistics.performed += instance.OnStatistics;
                @Statistics.canceled += instance.OnStatistics;
                @ConsoleLogs.started += instance.OnConsoleLogs;
                @ConsoleLogs.performed += instance.OnConsoleLogs;
                @ConsoleLogs.canceled += instance.OnConsoleLogs;
                @FollowEnemy.started += instance.OnFollowEnemy;
                @FollowEnemy.performed += instance.OnFollowEnemy;
                @FollowEnemy.canceled += instance.OnFollowEnemy;
            }
        }
    }
    public BasicMovementActions @BasicMovement => new BasicMovementActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IBasicMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnInspect(InputAction.CallbackContext context);
        void OnStatistics(InputAction.CallbackContext context);
        void OnConsoleLogs(InputAction.CallbackContext context);
        void OnFollowEnemy(InputAction.CallbackContext context);
    }
}
